
import { Base64 } from 'js-base64';
const bundle = '!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}([function(e,t){e.exports=React},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=n(38)()},function(e,t,n){var r=n(24);e.exports=function(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(10).default,o=n(7);e.exports=function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return o(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(19);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(10).default;function o(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(o=function(e){return e?n:t})(e)}e.exports=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=r(e)&&"function"!=typeof e)return{default:e};var n=o(t);if(n&&n.has(e))return n.get(e);var a={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var s=i?Object.getOwnPropertyDescriptor(e,u):null;s&&(s.get||s.set)?Object.defineProperty(a,u,s):a[u]=e[u]}return a.default=e,n&&n.set(e,a),a},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(){return e.exports=n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,n.apply(this,arguments)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(24);function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,r(o.key),o)}}e.exports=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.loadFromFile=t.isCancelException=t.makePageCallback=t.cancelRunningTask=t.makeCancellable=t.displayCORSWarning=t.errorOnDev=t.warnOnDev=t.getPixelRatio=t.callIfDefined=t.dataURItoUint8Array=t.isDataURI=t.isFile=t.isBlob=t.isArrayBuffer=t.isString=t.isProvided=t.isDefined=t.isProduction=t.isLocalFileSystem=t.isBrowser=void 0;var o=r(n(5)),a=r(n(6)),i=r(n(2)),u=r(n(8)),s=r(n(42)),c="undefined"!=typeof window;t.isBrowser=c;var l=c&&"file:"===window.location.protocol;t.isLocalFileSystem=l;t.isProduction=!0;var f=function(e){return void 0!==e};t.isDefined=f;t.isProvided=function(e){return f(e)&&null!==e};var d=function(e){return"string"==typeof e};t.isString=d;t.isArrayBuffer=function(e){return e instanceof ArrayBuffer};t.isBlob=function(e){if(!c)throw new Error("Attempted to check if a variable is a Blob on a non-browser environment.");return e instanceof Blob};t.isFile=function(e){if(!c)throw new Error("Attempted to check if a variable is a File on a non-browser environment.");return e instanceof File};var p=function(e){return d(e)&&/^data:/.test(e)};t.isDataURI=p;t.dataURItoUint8Array=function(e){if(!p(e))throw new Error("dataURItoUint8Array was provided with an argument which is not a valid data URI.");var t;t=e.split(",")[0].indexOf("base64")>=0?atob(e.split(",")[1]):unescape(e.split(",")[1]);for(var n=new Uint8Array(t.length),r=0;r<t.length;r+=1)n[r]=t.charCodeAt(r);return n};t.callIfDefined=function(e){if(e&&"function"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.apply(void 0,n)}};t.getPixelRatio=function(){return c&&window.devicePixelRatio||1};var h=function(e){},v=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return h.apply(void 0,["warn"].concat(t))};t.warnOnDev=v;t.errorOnDev=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return h.apply(void 0,["error"].concat(t))};t.displayCORSWarning=function(){l&&v("Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.")};var g=function(e){function t(e,n){var r;return(0,o.default)(this,t),(r=(0,a.default)(this,(0,i.default)(t).call(this,e,n))).name="PromiseCancelledException",r.message=e,r.type=n,r}return(0,u.default)(t,e),t}((0,s.default)(Error));t.makeCancellable=function(e){var t=!1;return{promise:new Promise((function(n,r){e.then((function(){return t?r(new g("Promise cancelled")):n.apply(void 0,arguments)}),(function(e){return r(t?new g("Promise cancelled"):e)}))})),cancel:function(){t=!0}}};t.cancelRunningTask=function(e){e&&e.cancel&&e.cancel()};t.makePageCallback=function(e,t){return Object.defineProperty(e,"width",{get:function(){return this.view[2]*t},configurable:!0}),Object.defineProperty(e,"height",{get:function(){return this.view[3]*t},configurable:!0}),Object.defineProperty(e,"originalWidth",{get:function(){return this.view[2]},configurable:!0}),Object.defineProperty(e,"originalHeight",{get:function(){return this.view[3]},configurable:!0}),e};t.isCancelException=function(e){return"RenderingCancelledException"===e.name||"PromiseCancelledException"===e.name};t.loadFromFile=function(e){return new Promise((function(t,n){var r=new FileReader;return r.onload=function(){return t(new Uint8Array(r.result))},r.onerror=function(e){switch(e.target.error.code){case e.target.error.NOT_FOUND_ERR:return n(new Error("Error while reading a file: File not found."));case e.target.error.NOT_READABLE_ERR:return n(new Error("Error while reading a file: File not readable."));case e.target.error.SECURITY_ERR:return n(new Error("Error while reading a file: Security error."));case e.target.error.ABORT_ERR:return n(new Error("Error while reading a file: Aborted."));default:return n(new Error("Error while reading a file."))}},r.readAsArrayBuffer(e),null}))}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.isRotate=t.isRenderMode=t.isPdf=t.isPageNumber=t.isPageIndex=t.isPage=t.isLinkTarget=t.isLinkService=t.isFile=t.isClassName=t.eventsProps=void 0;var o=r(n(10)),a=r(n(46)),i=r(n(3)),u=r(n(50)),s=n(20),c=n(13),l=r(n(27)),f=(0,u.default)((function(){var e={};return[].concat((0,a.default)(s.mouseEvents),(0,a.default)(s.touchEvents),(0,a.default)(s.keyboardEvents)).forEach((function(t){e[t]=i.default.func})),e}));t.eventsProps=f;var d=[i.default.string,i.default.instanceOf(ArrayBuffer),i.default.shape({data:i.default.object,httpHeaders:i.default.object,range:i.default.object,url:i.default.string,withCredentials:i.default.bool})];"undefined"!=typeof File&&d.push(i.default.instanceOf(File)),"undefined"!=typeof Blob&&d.push(i.default.instanceOf(Blob));var p=i.default.oneOfType([i.default.string,i.default.arrayOf(i.default.string)]);t.isClassName=p;var h=i.default.oneOfType(d);t.isFile=h;var v=i.default.instanceOf(l.default);t.isLinkService=v;var g=i.default.oneOf(["_self","_blank","_parent","_top"]);t.isLinkTarget=g;var m=i.default.shape({_transport:i.default.shape({fontLoader:i.default.object.isRequired}).isRequired,commonObjs:i.default.shape({_objs:i.default.object.isRequired}).isRequired,getAnnotations:i.default.func.isRequired,getTextContent:i.default.func.isRequired,getViewport:i.default.func.isRequired,render:i.default.func.isRequired});t.isPage=m;t.isPageIndex=function(e,t,n){var r=e[t],a=e.pageNumber,i=e.pdf;if(!(0,c.isDefined)(i))return null;if((0,c.isDefined)(r)){if("number"!=typeof r)return new Error("`".concat(t,"` of type `").concat((0,o.default)(r),"` supplied to `").concat(n,"`, expected `number`."));if(r<0)return new Error("Expected `".concat(t,"` to be greater or equal to 0."));var u=i.numPages;if(r+1>u)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(u-1,"."))}else if(!(0,c.isDefined)(a))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(n,"`."));return null};t.isPageNumber=function(e,t,n){var r=e[t],a=e.pageIndex,i=e.pdf;if(!(0,c.isDefined)(i))return null;if((0,c.isDefined)(r)){if("number"!=typeof r)return new Error("`".concat(t,"` of type `").concat((0,o.default)(r),"` supplied to `").concat(n,"`, expected `number`."));if(r<1)return new Error("Expected `".concat(t,"` to be greater or equal to 1."));var u=i.numPages;if(r>u)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(u,"."))}else if(!(0,c.isDefined)(a))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(n,"`."));return null};var y=i.default.oneOfType([i.default.shape({getDestination:i.default.func.isRequired,getOutline:i.default.func.isRequired,getPage:i.default.func.isRequired,numPages:i.default.number.isRequired}),i.default.bool]);t.isPdf=y;var x=i.default.oneOf(["canvas","none","svg"]);t.isRenderMode=x;var b=i.default.oneOf([0,90,180,270]);t.isRotate=b},function(e,t,n){(function(t){for(var r=n(61),o="undefined"==typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",u=o["request"+i],s=o["cancel"+i]||o["cancelRequest"+i],c=0;!u&&c<a.length;c++)u=o[a[c]+"Request"+i],s=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!u||!s){var l=0,f=0,d=[];u=function(e){if(0===d.length){var t=r(),n=Math.max(0,1e3/60-(t-l));l=n+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(l)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return d.push({handle:++f,callback:e,cancelled:!1}),f},s=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return u.call(o,e)},e.exports.cancel=function(){s.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=u,e.cancelAnimationFrame=s}}).call(this,n(60))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=(0,n(0).createContext)(null);t.default=r},function(e,t,n){var r=n(36)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(e,t){function n(e,t,n,r,o,a,i){try{var u=e[a](i),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(o,a){var i=e.apply(t,r);function u(e){n(i,o,a,u,s,"next",e)}function s(e){n(i,o,a,u,s,"throw",e)}u(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";n.r(t),n.d(t,"clipboardEvents",(function(){return o})),n.d(t,"compositionEvents",(function(){return a})),n.d(t,"focusEvents",(function(){return i})),n.d(t,"formEvents",(function(){return u})),n.d(t,"imageEvents",(function(){return s})),n.d(t,"keyboardEvents",(function(){return c})),n.d(t,"mediaEvents",(function(){return l})),n.d(t,"mouseEvents",(function(){return f})),n.d(t,"dragEvents",(function(){return d})),n.d(t,"selectionEvents",(function(){return p})),n.d(t,"touchEvents",(function(){return h})),n.d(t,"pointerEvents",(function(){return v})),n.d(t,"uiEvents",(function(){return g})),n.d(t,"wheelEvents",(function(){return m})),n.d(t,"animationEvents",(function(){return y})),n.d(t,"transitionEvents",(function(){return x})),n.d(t,"otherEvents",(function(){return b})),n.d(t,"changeEvents",(function(){return w})),n.d(t,"allEvents",(function(){return _})),n.d(t,"default",(function(){return E}));var r=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},o=["onCopy","onCut","onPaste"],a=["onCompositionEnd","onCompositionStart","onCompositionUpdate"],i=["onFocus","onBlur"],u=["onInput","onInvalid","onReset","onSubmit"],s=["onLoad","onError"],c=["onKeyDown","onKeyPress","onKeyUp"],l=["onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onError","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting"],f=["onClick","onContextMenu","onDoubleClick","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],d=["onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop"],p=["onSelect"],h=["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"],v=["onPointerDown","onPointerMove","onPointerUp","onPointerCancel","onGotPointerCapture","onLostPointerCapture","onPointerEnter","onPointerLeave","onPointerOver","onPointerOut"],g=["onScroll"],m=["onWheel"],y=["onAnimationStart","onAnimationEnd","onAnimationIteration"],x=["onTransitionEnd"],b=["onToggle"],w=["onChange"],_=r(r(r(r(r(r(r(r(r(r(r(r(r(r(r(r(r(r([],o,!0),a,!0),i,!0),u,!0),s,!0),c,!0),l,!0),f,!0),d,!0),p,!0),h,!0),v,!0),g,!0),m,!0),y,!0),x,!0),w,!0),b,!0);function E(e,t){var n={};return _.forEach((function(r){var o=e[r];o&&(n[r]=t?function(e){return o(e,t(r))}:o)})),n}},function(e,t){e.exports=pdfjsLib},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=(0,n(0).createContext)(null);t.default=r},function(e,t,n){var r=n(4);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach((function(t){r(e,t,n[t])}))}return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(10).default,o=n(37);e.exports=function(e){var t=o(e,"string");return"symbol"===r(t)?t:String(t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";function r(){return Array.prototype.slice.call(arguments).reduce((function(e,t){return e.concat(t)}),[]).filter((function(e){return"string"==typeof e})).join(" ")}n.r(t),n.d(t,"default",(function(){return r}))},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=r(n(3)),i=function(e){var t=e.children,n=e.type;return o.default.createElement("div",{className:"react-pdf__message react-pdf__message--".concat(n)},t)};i.propTypes={children:a.default.node,type:a.default.oneOf(["error","loading","no-data"]).isRequired};var u=i;t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=n(40).PDFLinkService;t.default=r},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(28);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(11)),i=o(n(34)),u=o(n(10)),s=o(n(17)),c=o(n(23)),l=o(n(18)),f=o(n(5)),d=o(n(12)),p=o(n(6)),h=o(n(2)),v=o(n(8)),g=o(n(7)),m=o(n(4)),y=r(n(0)),x=o(n(3)),b=o(n(20)),w=o(n(25)),_=r(n(21)),E=o(n(22)),P=o(n(26)),k=o(n(27)),S=o(n(41)),R=n(13),O=n(14),L=function(e){function t(){var e,n;(0,f.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,p.default)(this,(e=(0,h.default)(t)).call.apply(e,[this].concat(o))),(0,m.default)((0,g.default)((0,g.default)(n)),"state",{pdf:null}),(0,m.default)((0,g.default)((0,g.default)(n)),"viewer",{scrollPageIntoView:function(e){var t=e.pageNumber,r=n.props.onItemClick;if(r)r({pageNumber:t});else{var o=n.pages[t-1];o?o.scrollIntoView():(0,R.warnOnDev)("Warning: An internal link leading to page ".concat(t," was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>."))}}}),(0,m.default)((0,g.default)((0,g.default)(n)),"linkService",new k.default),(0,m.default)((0,g.default)((0,g.default)(n)),"loadDocument",(0,l.default)(s.default.mark((function e(){var t,r,o,a,i,u,l,f;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=null,e.prev=1,e.next=4,n.findDocumentSource();case 4:t=e.sent,n.onSourceSuccess(),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),n.onSourceError(e.t0);case 11:if(t){e.next=13;break}return e.abrupt("return");case 13:return n.setState((function(e){return e.pdf?{pdf:null}:null})),r=n.props,o=r.options,a=r.onLoadProgress,i=r.onPassword,e.prev=15,(0,R.cancelRunningTask)(n.runningTask),(u=_.default.getDocument((0,c.default)({},t,o))).onPassword=i,a&&(u.onProgress=a),l=(0,R.makeCancellable)(u.promise),n.runningTask=l,e.next=24,l.promise;case 24:f=e.sent,n.setState((function(e){return e.pdf&&e.pdf.fingerprint===f.fingerprint?null:{pdf:f}}),n.onLoadSuccess),e.next=31;break;case 28:e.prev=28,e.t1=e.catch(15),n.onLoadError(e.t1);case 31:case"end":return e.stop()}}),e,this,[[1,8],[15,28]])})))),(0,m.default)((0,g.default)((0,g.default)(n)),"setupLinkService",(function(){n.linkService.setViewer(n.viewer);var e=(0,g.default)((0,g.default)(n));Object.defineProperty(n.linkService,"externalLinkTarget",{get:function(){switch(e.props.externalLinkTarget){case"_self":return 1;case"_blank":return 2;case"_parent":return 3;case"_top":return 4;default:return 0}}})})),(0,m.default)((0,g.default)((0,g.default)(n)),"onSourceSuccess",(function(){var e=n.props.onSourceSuccess;(0,R.callIfDefined)(e)})),(0,m.default)((0,g.default)((0,g.default)(n)),"onSourceError",(function(e){if(!(0,R.isCancelException)(e)){(0,R.errorOnDev)(e);var t=n.props.onSourceError;(0,R.callIfDefined)(t,e)}})),(0,m.default)((0,g.default)((0,g.default)(n)),"onLoadSuccess",(function(){var e=n.props.onLoadSuccess,t=n.state.pdf;(0,R.callIfDefined)(e,t),n.pages=new Array(t.numPages),n.linkService.setDocument(t)})),(0,m.default)((0,g.default)((0,g.default)(n)),"onLoadError",(function(e){if(!(0,R.isCancelException)(e)){n.setState({pdf:!1}),(0,R.errorOnDev)(e);var t=n.props.onLoadError;(0,R.callIfDefined)(t,e)}})),(0,m.default)((0,g.default)((0,g.default)(n)),"findDocumentSource",(0,l.default)(s.default.mark((function e(){var t,r,o,a,l;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.props.file){e.next=3;break}return e.abrupt("return",null);case 3:if("string"!=typeof t){e.next=9;break}if(!(0,R.isDataURI)(t)){e.next=7;break}return r=(0,R.dataURItoUint8Array)(t),e.abrupt("return",{data:r});case 7:return(0,R.displayCORSWarning)(),e.abrupt("return",{url:t});case 9:if(!(t instanceof _.PDFDataRangeTransport)){e.next=11;break}return e.abrupt("return",{range:t});case 11:if(!(0,R.isArrayBuffer)(t)){e.next=13;break}return e.abrupt("return",{data:t});case 13:if(!R.isBrowser){e.next=19;break}if(!(0,R.isBlob)(t)&&!(0,R.isFile)(t)){e.next=19;break}return e.next=17,(0,R.loadFromFile)(t);case 17:return e.t0=e.sent,e.abrupt("return",{data:e.t0});case 19:if("object"===(0,u.default)(t)){e.next=21;break}throw new Error("Invalid parameter in file, need either Uint8Array, string or a parameter object");case 21:if(t.url||t.data||t.range){e.next=23;break}throw new Error("Invalid parameter object: need either .data, .range or .url");case 23:if("string"!=typeof t.url){e.next=29;break}if(!(0,R.isDataURI)(t.url)){e.next=28;break}return o=t.url,a=(0,i.default)(t,["url"]),l=(0,R.dataURItoUint8Array)(o),e.abrupt("return",(0,c.default)({data:l},a));case 28:(0,R.displayCORSWarning)();case 29:return e.abrupt("return",t);case 30:case"end":return e.stop()}}),e,this)})))),(0,m.default)((0,g.default)((0,g.default)(n)),"registerPage",(function(e,t){n.pages[e]=t})),(0,m.default)((0,g.default)((0,g.default)(n)),"unregisterPage",(function(e){delete n.pages[e]})),n}return(0,v.default)(t,e),(0,d.default)(t,[{key:"componentDidMount",value:function(){this.loadDocument(),this.setupLinkService()}},{key:"componentDidUpdate",value:function(e){this.props.file!==e.file&&this.loadDocument()}},{key:"componentWillUnmount",value:function(){(0,R.cancelRunningTask)(this.runningTask)}},{key:"renderChildren",value:function(){var e=this.props.children;return y.default.createElement(E.default.Provider,{value:this.childContext},e)}},{key:"renderContent",value:function(){var e=this.props.file,t=this.state.pdf;if(!e){var n=this.props.noData;return y.default.createElement(P.default,{type:"no-data"},"function"==typeof n?n():n)}if(null===t){var r=this.props.loading;return y.default.createElement(P.default,{type:"loading"},"function"==typeof r?r():r)}if(!1===t){var o=this.props.error;return y.default.createElement(P.default,{type:"error"},"function"==typeof o?o():o)}return this.renderChildren()}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.inputRef;return y.default.createElement("div",(0,a.default)({className:(0,w.default)("react-pdf__Document",t),ref:n},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.linkService,t=this.registerPage,n=this.unregisterPage,r=this.props,o=r.renderMode,a=r.rotate;return{linkService:e,pdf:this.state.pdf,registerPage:t,renderMode:o,rotate:a,unregisterPage:n}}},{key:"eventProps",get:function(){var e=this;return(0,b.default)(this.props,(function(){return e.state.pdf}))}}]),t}(y.PureComponent);t.default=L,L.defaultProps={error:"Failed to load PDF file.",loading:"Loading PDF…",noData:"No PDF file specified.",onPassword:function(e,t){switch(t){case S.default.NEED_PASSWORD:e(prompt("Enter the password to open this PDF file."));break;case S.default.INCORRECT_PASSWORD:e(prompt("Invalid password. Please try again."))}}},L.propTypes=(0,c.default)({children:x.default.node,className:O.isClassName,error:x.default.node,file:R.isFile,inputRef:x.default.func,loading:x.default.node,noData:x.default.node,onItemClick:x.default.func,onLoadError:x.default.func,onLoadProgress:x.default.func,onLoadSuccess:x.default.func,onPassword:x.default.func,onSourceError:x.default.func,onSourceSuccess:x.default.func,rotate:x.default.number},(0,O.eventsProps)())},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PageInternal=void 0;var a=o(n(23)),i=o(n(11)),u=o(n(17)),s=o(n(18)),c=o(n(5)),l=o(n(12)),f=o(n(6)),d=o(n(2)),p=o(n(8)),h=o(n(7)),v=o(n(4)),g=r(n(0)),m=o(n(3)),y=o(n(20)),x=o(n(25)),b=o(n(22)),w=o(n(16)),_=o(n(26)),E=o(n(51)),P=o(n(52)),k=o(n(53)),S=o(n(59)),R=n(13),O=n(14),L=function(e){function t(){var e,n;(0,c.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,f.default)(this,(e=(0,d.default)(t)).call.apply(e,[this].concat(o))),(0,v.default)((0,h.default)((0,h.default)(n)),"state",{page:null}),(0,v.default)((0,h.default)((0,h.default)(n)),"onLoadSuccess",(function(){var e=n.props,t=e.onLoadSuccess,r=e.registerPage,o=n.state.page;(0,R.callIfDefined)(t,(0,R.makePageCallback)(o,n.scale)),(0,R.callIfDefined)(r,n.pageIndex,n.ref)})),(0,v.default)((0,h.default)((0,h.default)(n)),"onLoadError",(function(e){if(!(0,R.isCancelException)(e)){(0,R.errorOnDev)(e);var t=n.props.onLoadError;(0,R.callIfDefined)(t,e)}})),(0,v.default)((0,h.default)((0,h.default)(n)),"loadPage",(0,s.default)(u.default.mark((function e(){var t,r,o,a;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=n.props.pdf,r=n.getPageNumber()){e.next=4;break}return e.abrupt("return");case 4:return n.setState((function(e){return e.page?{page:null}:null})),e.prev=5,o=(0,R.makeCancellable)(t.getPage(r)),n.runningTask=o,e.next=10,o.promise;case 10:a=e.sent,n.setState({page:a},n.onLoadSuccess),e.next=18;break;case 14:e.prev=14,e.t0=e.catch(5),n.setState({page:!1}),n.onLoadError(e.t0);case 18:case"end":return e.stop()}}),e,this,[[5,14]])})))),n}return(0,p.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.pdf)throw new Error("Attempted to load a page, but no document was specified.");this.loadPage()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;if(e.pdf&&t!==e.pdf||this.getPageNumber()!==this.getPageNumber(e)){var n=this.props.unregisterPage;(0,R.callIfDefined)(n,this.getPageIndex(e)),this.loadPage()}}},{key:"componentWillUnmount",value:function(){var e=this.props.unregisterPage;(0,R.callIfDefined)(e,this.pageIndex),(0,R.cancelRunningTask)(this.runningTask)}},{key:"getPageIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return(0,R.isProvided)(e.pageNumber)?e.pageNumber-1:(0,R.isProvided)(e.pageIndex)?e.pageIndex:null}},{key:"getPageNumber",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return(0,R.isProvided)(e.pageNumber)?e.pageNumber:(0,R.isProvided)(e.pageIndex)?e.pageIndex+1:null}},{key:"renderMainLayer",value:function(){switch(this.props.renderMode){case"none":return null;case"svg":return g.default.createElement(P.default,{key:"".concat(this.pageKeyNoScale,"_svg")});case"canvas":default:return g.default.createElement(E.default,{key:"".concat(this.pageKey,"_canvas")})}}},{key:"renderTextLayer",value:function(){var e=this.props.renderTextLayer;return e?g.default.createElement(k.default,{key:"".concat(this.pageKey,"_text")}):null}},{key:"renderAnnotationLayer",value:function(){var e=this.props.renderAnnotationLayer;return e?g.default.createElement(S.default,{key:"".concat(this.pageKey,"_annotations")}):null}},{key:"renderChildren",value:function(){var e=this.props.children;return g.default.createElement(w.default.Provider,{value:this.childContext},this.renderMainLayer(),this.renderTextLayer(),this.renderAnnotationLayer(),e)}},{key:"renderContent",value:function(){var e=this.pageNumber,t=this.props.pdf,n=this.state.page;if(!e){var r=this.props.noData;return g.default.createElement(_.default,{type:"no-data"},"function"==typeof r?r():r)}if(null===t||null===n){var o=this.props.loading;return g.default.createElement(_.default,{type:"loading"},"function"==typeof o?o():o)}if(!1===t||!1===n){var a=this.props.error;return g.default.createElement(_.default,{type:"error"},"function"==typeof a?a():a)}return this.renderChildren()}},{key:"render",value:function(){var e=this,t=this.pageNumber,n=this.props.className;return g.default.createElement("div",(0,i.default)({className:(0,x.default)("react-pdf__Page",n),ref:function(t){var n=e.props.inputRef;n&&n(t),e.ref=t},style:{position:"relative"},"data-page-number":t},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.state.page;if(!e)return{};var t=this.props;return{customTextRenderer:t.customTextRenderer,onGetAnnotationsError:t.onGetAnnotationsError,onGetAnnotationsSuccess:t.onGetAnnotationsSuccess,onGetTextError:t.onGetTextError,onGetTextSuccess:t.onGetTextSuccess,onRenderAnnotationLayerError:t.onRenderAnnotationLayerError,onRenderAnnotationLayerSuccess:t.onRenderAnnotationLayerSuccess,onRenderError:t.onRenderError,onRenderSuccess:t.onRenderSuccess,page:e,renderInteractiveForms:t.renderInteractiveForms,rotate:this.rotate,scale:this.scale}}},{key:"pageIndex",get:function(){return this.getPageIndex()}},{key:"pageNumber",get:function(){return this.getPageNumber()}},{key:"rotate",get:function(){var e=this.props.rotate;if((0,R.isProvided)(e))return e;var t=this.state.page;return t?t.rotate:null}},{key:"scale",get:function(){var e=this.state.page;if(!e)return null;var t=this.props,n=t.scale,r=t.width,o=t.height,a=this.rotate,i=1,u=null===n?1:n;if(r||o){var s=e.getViewport({scale:1,rotation:a});i=r?r/s.width:o/s.height}return u*i}},{key:"eventProps",get:function(){var e=this;return(0,y.default)(this.props,(function(){var t=e.state.page;return t?(0,R.makePageCallback)(t,e.scale):t}))}},{key:"pageKey",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"@").concat(this.scale,"/").concat(this.rotate)}},{key:"pageKeyNoScale",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"/").concat(this.rotate)}}]),t}(g.PureComponent);t.PageInternal=L,L.defaultProps={error:"Failed to load the page.",loading:"Loading page…",noData:"No page specified.",renderAnnotationLayer:!0,renderInteractiveForms:!1,renderMode:"canvas",renderTextLayer:!0,scale:1},L.propTypes=(0,a.default)({children:m.default.node,className:O.isClassName,customTextRenderer:m.default.func,error:m.default.node,height:m.default.number,inputRef:m.default.func,loading:m.default.node,noData:m.default.node,onGetTextError:m.default.func,onGetTextSuccess:m.default.func,onLoadError:m.default.func,onLoadSuccess:m.default.func,onRenderError:m.default.func,onRenderSuccess:m.default.func,pageIndex:O.isPageIndex,pageNumber:O.isPageNumber,pdf:O.isPdf,registerPage:m.default.func,renderAnnotationLayer:m.default.bool,renderInteractiveForms:m.default.bool,renderMode:O.isRenderMode,renderTextLayer:m.default.bool,rotate:O.isRotate,scale:m.default.number,unregisterPage:m.default.func,width:m.default.number},(0,O.eventsProps)());var C=g.default.forwardRef((function(e,t){return g.default.createElement(b.default.Consumer,null,(function(n){return g.default.createElement(L,(0,i.default)({ref:t},n,e,{renderAnnotationLayer:void 0!==e.renderAnnotationLayer?e.renderAnnotationLayer:e.renderAnnotations}))}))}));t.default=C},function(e,t,n){e.exports=n(67)},function(e,t,n){var r=n(35);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(10).default;function o(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */e.exports=o=function(){return n},e.exports.__esModule=!0,e.exports.default=e.exports;var t,n={},a=Object.prototype,i=a.hasOwnProperty,u=Object.defineProperty||function(e,t,n){e[t]=n.value},s="function"==typeof Symbol?Symbol:{},c=s.iterator||"@@iterator",l=s.asyncIterator||"@@asyncIterator",f=s.toStringTag||"@@toStringTag";function d(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{d({},"")}catch(t){d=function(e,t,n){return e[t]=n}}function p(e,t,n,r){var o=t&&t.prototype instanceof x?t:x,a=Object.create(o.prototype),i=new D(r||[]);return u(a,"_invoke",{value:O(e,n,i)}),a}function h(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}n.wrap=p;var v="suspendedStart",g="executing",m="completed",y={};function x(){}function b(){}function w(){}var _={};d(_,c,(function(){return this}));var E=Object.getPrototypeOf,P=E&&E(E(I([])));P&&P!==a&&i.call(P,c)&&(_=P);var k=w.prototype=x.prototype=Object.create(_);function S(e){["next","throw","return"].forEach((function(t){d(e,t,(function(e){return this._invoke(t,e)}))}))}function R(e,t){function n(o,a,u,s){var c=h(e[o],e,a);if("throw"!==c.type){var l=c.arg,f=l.value;return f&&"object"==r(f)&&i.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,u,s)}),(function(e){n("throw",e,u,s)})):t.resolve(f).then((function(e){l.value=e,u(l)}),(function(e){return n("throw",e,u,s)}))}s(c.arg)}var o;u(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}})}function O(e,n,r){var o=v;return function(a,i){if(o===g)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:t,done:!0}}for(r.method=a,r.arg=i;;){var u=r.delegate;if(u){var s=L(u,r);if(s){if(s===y)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===v)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=g;var c=h(e,n,r);if("normal"===c.type){if(o=r.done?m:"suspendedYield",c.arg===y)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=m,r.method="throw",r.arg=c.arg)}}}function L(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=h(o,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function D(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function I(e){if(e||""===e){var n=e[c];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(i.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}throw new TypeError(r(e)+" is not iterable")}return b.prototype=w,u(k,"constructor",{value:w,configurable:!0}),u(w,"constructor",{value:b,configurable:!0}),b.displayName=d(w,f,"GeneratorFunction"),n.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===b||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,w):(e.__proto__=w,d(e,f,"GeneratorFunction")),e.prototype=Object.create(k),e},n.awrap=function(e){return{__await:e}},S(R.prototype),d(R.prototype,l,(function(){return this})),n.AsyncIterator=R,n.async=function(e,t,r,o,a){void 0===a&&(a=Promise);var i=new R(p(e,t,r,o),a);return n.isGeneratorFunction(t)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(k),d(k,f,"Generator"),d(k,c,(function(){return this})),d(k,"toString",(function(){return"[object Generator]"})),n.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=I,D.prototype={constructor:D,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,o){return u.type="throw",u.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:I(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),y}},n}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(10).default;e.exports=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t||"default");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(39);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=pdfjsViewer},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};t.default=r},function(e,t,n){var r=n(2),o=n(19),a=n(43),i=n(44);function u(t){var n="function"==typeof Map?new Map:void 0;return e.exports=u=function(e){if(null===e||!a(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return i(e,arguments,r(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o(t,e)},e.exports.__esModule=!0,e.exports.default=e.exports,u(t)}e.exports=u,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(19),o=n(45);function a(t,n,i){return o()?(e.exports=a=Reflect.construct.bind(),e.exports.__esModule=!0,e.exports.default=e.exports):(e.exports=a=function(e,t,n){var o=[null];o.push.apply(o,t);var a=new(Function.bind.apply(e,o));return n&&r(a,n.prototype),a},e.exports.__esModule=!0,e.exports.default=e.exports),a.apply(null,arguments)}e.exports=a,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(47),o=n(48),a=n(29),i=n(49);e.exports=function(e){return r(e)||o(e)||a(e)||i()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(28);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,u=Object.prototype.toString;function s(e,t){var s;if("function"!=typeof t)throw new TypeError("Expected a function");return e=function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(c(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=c(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var s=o.test(e);return s||a.test(e)?i(e.slice(2),s?2:8):r.test(e)?NaN:+e}(e))===1/0||e===-1/0){return 17976931348623157e292*(e<0?-1:1)}return e==e?e:0}(e),s=t%1;return t==t?s?t-s:t:0}(e),function(){return--e>0&&(s=t.apply(this,arguments)),e<=1&&(t=void 0),s}}function c(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e){return s(2,e)}},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return p.default.createElement(v.default.Consumer,null,(function(t){return p.default.createElement(y,(0,a.default)({},t,e))}))},t.PageCanvasInternal=void 0;var a=o(n(11)),i=o(n(5)),u=o(n(12)),s=o(n(6)),c=o(n(2)),l=o(n(8)),f=o(n(7)),d=o(n(4)),p=r(n(0)),h=o(n(3)),v=o(n(16)),g=n(13),m=n(14),y=function(e){function t(){var e,n;(0,i.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o))),(0,d.default)((0,f.default)((0,f.default)(n)),"onRenderSuccess",(function(){n.renderer=null;var e=n.props,t=e.onRenderSuccess,r=e.page,o=e.scale;(0,g.callIfDefined)(t,(0,g.makePageCallback)(r,o))})),(0,d.default)((0,f.default)((0,f.default)(n)),"onRenderError",(function(e){if(!(0,g.isCancelException)(e)){(0,g.errorOnDev)(e);var t=n.props.onRenderError;(0,g.callIfDefined)(t,e)}})),(0,d.default)((0,f.default)((0,f.default)(n)),"drawPageOnCanvas",(function(){var e=(0,f.default)((0,f.default)(n)).canvasLayer;if(!e)return null;var t=(0,f.default)((0,f.default)(n)),r=t.renderViewport,o=t.viewport,a=n.props,i=a.page,u=a.renderInteractiveForms;e.width=r.width,e.height=r.height,e.style.width="".concat(Math.floor(o.width),"px"),e.style.height="".concat(Math.floor(o.height),"px");var s={get canvasContext(){return e.getContext("2d")},viewport:r,renderInteractiveForms:u};return n.cancelRenderingTask(),n.renderer=i.render(s),n.renderer.promise.then(n.onRenderSuccess).catch(n.onRenderError)})),n}return(0,l.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.drawPageOnCanvas()}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.page;t.renderInteractiveForms!==e.renderInteractiveForms&&(n.cleanup(),this.drawPageOnCanvas())}},{key:"componentWillUnmount",value:function(){this.cancelRenderingTask(),this.canvasLayer&&(this.canvasLayer.width=0,this.canvasLayer.height=0,this.canvasLayer=null)}},{key:"cancelRenderingTask",value:function(){this.renderer&&this.renderer._internalRenderTask.running&&this.renderer._internalRenderTask.cancel()}},{key:"render",value:function(){var e=this;return p.default.createElement("canvas",{className:"react-pdf__Page__canvas",style:{display:"block",userSelect:"none"},ref:function(t){e.canvasLayer=t}})}},{key:"renderViewport",get:function(){var e=this.props,t=e.page,n=e.rotate,r=e.scale,o=(0,g.getPixelRatio)();return t.getViewport({scale:r*o,rotation:n})}},{key:"viewport",get:function(){var e=this.props,t=e.page,n=e.rotate,r=e.scale;return t.getViewport({scale:r,rotation:n})}}]),t}(p.PureComponent);t.PageCanvasInternal=y,y.propTypes={onRenderError:h.default.func,onRenderSuccess:h.default.func,page:m.isPage.isRequired,renderInteractiveForms:h.default.bool,rotate:m.isRotate,scale:h.default.number}},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return p.default.createElement(g.default.Consumer,null,(function(t){return p.default.createElement(x,(0,a.default)({},t,e))}))},t.PageSVGInternal=void 0;var a=o(n(11)),i=o(n(5)),u=o(n(12)),s=o(n(6)),c=o(n(2)),l=o(n(8)),f=o(n(7)),d=o(n(4)),p=r(n(0)),h=o(n(3)),v=o(n(21)),g=o(n(16)),m=n(13),y=n(14),x=function(e){function t(){var e,n;(0,i.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o))),(0,d.default)((0,f.default)((0,f.default)(n)),"state",{svg:null}),(0,d.default)((0,f.default)((0,f.default)(n)),"onRenderSuccess",(function(){n.renderer=null;var e=n.props,t=e.onRenderSuccess,r=e.page,o=e.scale;(0,m.callIfDefined)(t,(0,m.makePageCallback)(r,o))})),(0,d.default)((0,f.default)((0,f.default)(n)),"onRenderError",(function(e){if(!(0,m.isCancelException)(e)){(0,m.errorOnDev)(e);var t=n.props.onRenderError;(0,m.callIfDefined)(t,e)}})),(0,d.default)((0,f.default)((0,f.default)(n)),"renderSVG",(function(){var e=n.props.page;return n.renderer=e.getOperatorList(),n.renderer.then((function(t){var r=new v.default.SVGGraphics(e.commonObjs,e.objs);n.renderer=r.getSVG(t,n.viewport).then((function(e){n.setState({svg:e},n.onRenderSuccess)})).catch(n.onRenderError)})).catch(n.onRenderError)})),(0,d.default)((0,f.default)((0,f.default)(n)),"drawPageOnContainer",(function(e){var t=n.state.svg;if(e&&t){e.firstElementChild||e.appendChild(t);var r=n.viewport,o=r.width,a=r.height;t.setAttribute("width",o),t.setAttribute("height",a)}})),n}return(0,l.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.renderSVG()}},{key:"render",value:function(){var e=this,t=this.viewport,n=t.width,r=t.height;return p.default.createElement("div",{className:"react-pdf__Page__svg",style:{display:"block",backgroundColor:"white",overflow:"hidden",width:n,height:r,userSelect:"none"},ref:function(t){return e.drawPageOnContainer(t)}})}},{key:"viewport",get:function(){var e=this.props,t=e.page,n=e.rotate,r=e.scale;return t.getViewport({scale:r,rotation:n})}}]),t}(p.PureComponent);t.PageSVGInternal=x,x.propTypes={onRenderError:h.default.func,onRenderSuccess:h.default.func,page:y.isPage.isRequired,rotate:y.isRotate,scale:h.default.number}},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return v.default.createElement(m.default.Consumer,null,(function(t){return v.default.createElement(w,(0,a.default)({},t,e))}))},t.TextLayerInternal=void 0;var a=o(n(11)),i=o(n(17)),u=o(n(18)),s=o(n(5)),c=o(n(12)),l=o(n(6)),f=o(n(2)),d=o(n(8)),p=o(n(7)),h=o(n(4)),v=r(n(0)),g=o(n(3)),m=o(n(16)),y=o(n(54)),x=n(13),b=n(14),w=function(e){function t(){var e,n;(0,s.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,l.default)(this,(e=(0,f.default)(t)).call.apply(e,[this].concat(o))),(0,h.default)((0,p.default)((0,p.default)(n)),"state",{textItems:null}),(0,h.default)((0,p.default)((0,p.default)(n)),"loadTextItems",(0,u.default)(i.default.mark((function e(){var t,r,o,a;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.page,e.prev=1,r=(0,x.makeCancellable)(t.getTextContent()),n.runningTask=r,e.next=6,r.promise;case 6:o=e.sent,a=o.items,n.setState({textItems:a},n.onLoadSuccess),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n.onLoadError(e.t0);case 14:case"end":return e.stop()}}),e,this,[[1,11]])})))),(0,h.default)((0,p.default)((0,p.default)(n)),"onLoadSuccess",(function(){var e=n.props.onGetTextSuccess,t=n.state.textItems;(0,x.callIfDefined)(e,t)})),(0,h.default)((0,p.default)((0,p.default)(n)),"onLoadError",(function(e){if(!(0,x.isCancelException)(e)){n.setState({textItems:!1}),(0,x.errorOnDev)(e);var t=n.props.onGetTextError;(0,x.callIfDefined)(t,e)}})),n}return(0,d.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page text content, but no page was specified.");this.loadTextItems()}},{key:"componentDidUpdate",value:function(e){var t=this.props.page;e.page&&t!==e.page&&this.loadTextItems()}},{key:"componentWillUnmount",value:function(){(0,x.cancelRunningTask)(this.runningTask)}},{key:"renderTextItems",value:function(){var e=this.state.textItems;return e?e.map((function(e,t){return v.default.createElement(y.default,(0,a.default)({key:t,itemIndex:t},e))})):null}},{key:"render",value:function(){var e=this.unrotatedViewport,t=this.rotate;return v.default.createElement("div",{className:"react-pdf__Page__textContent",style:{position:"absolute",top:"50%",left:"50%",width:"".concat(e.width,"px"),height:"".concat(e.height,"px"),color:"transparent",transform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),pointerEvents:"none"}},this.renderTextItems())}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,n=e.scale;return t.getViewport({scale:n})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}}]),t}(v.PureComponent);t.TextLayerInternal=w,w.propTypes={onGetTextError:g.default.func,onGetTextSuccess:g.default.func,page:b.isPage.isRequired,rotate:b.isRotate,scale:g.default.number}},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return g.default.createElement(y.default.Consumer,null,(function(t){return g.default.createElement(b,(0,a.default)({},t,e))}))},t.TextLayerItemInternal=void 0;var a=o(n(11)),i=o(n(55)),u=o(n(17)),s=o(n(18)),c=o(n(5)),l=o(n(12)),f=o(n(6)),d=o(n(2)),p=o(n(8)),h=o(n(7)),v=o(n(4)),g=r(n(0)),m=o(n(3)),y=o(n(16)),x=n(14),b=function(e){function t(){var e,n;(0,c.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,f.default)(this,(e=(0,d.default)(t)).call.apply(e,[this].concat(o))),(0,v.default)((0,h.default)((0,h.default)(n)),"getElementWidth",(function(e){var t=(0,h.default)((0,h.default)(n)).sideways;return e.getBoundingClientRect()[t?"height":"width"]})),n}var n,r;return(0,p.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.alignTextItem()}},{key:"componentDidUpdate",value:function(){this.alignTextItem()}},{key:"getFontData",value:(r=(0,s.default)(u.default.mark((function e(t){var n,r;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=this.props.page,e.next=3,new Promise((function(e){n.commonObjs.get(t,e)}));case 3:return r=e.sent,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"alignTextItem",value:(n=(0,s.default)(u.default.mark((function e(){var t,n,r,o,a,i,s,c,l,f,d;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this.item){e.next=3;break}return e.abrupt("return");case 3:return t.style.transform="",n=this.props,r=n.fontName,o=n.scale,a=n.width,t.style.fontFamily="".concat(r,", sans-serif"),e.next=8,this.getFontData(r);case 8:i=e.sent,s=i?i.fallbackName:"sans-serif",t.style.fontFamily="".concat(r,", ").concat(s),c=a*o,l=this.getElementWidth(t),f="scaleX(".concat(c/l,")"),(d=i?i.ascent:0)&&(f+=" translateY(".concat(100*(1-d),"%)")),t.style.transform=f;case 17:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"render",value:function(){var e=this,t=this.fontSize,n=this.top,r=this.left,o=this.props,a=o.customTextRenderer,i=o.scale,u=o.str;return g.default.createElement("span",{style:{height:"1em",fontFamily:"sans-serif",fontSize:"".concat(t*i,"px"),position:"absolute",top:"".concat(n*i,"px"),left:"".concat(r*i,"px"),transformOrigin:"left bottom",whiteSpace:"pre",pointerEvents:"all"},ref:function(t){e.item=t}},a?a(this.props):u)}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,n=e.scale;return t.getViewport({scale:n})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}},{key:"sideways",get:function(){return this.rotate%180!=0}},{key:"defaultSideways",get:function(){return this.unrotatedViewport.rotation%180!=0}},{key:"fontSize",get:function(){var e=this.props.transform,t=this.defaultSideways,n=(0,i.default)(e,2),r=n[0],o=n[1];return t?o:r}},{key:"top",get:function(){var e=this.props.transform,t=this.unrotatedViewport,n=this.defaultSideways,r=(0,i.default)(e,6),o=r[2],a=r[3],u=r[4],s=r[5],c=(0,i.default)(t.viewBox,4),l=c[1],f=c[3];return n?u+o+l:f-(s+a)}},{key:"left",get:function(){var e=this.props.transform,t=this.unrotatedViewport,n=this.defaultSideways,r=(0,i.default)(e,6),o=r[4],a=r[5],u=(0,i.default)(t.viewBox,1)[0];return n?a-u:o-u}}]),t}(g.PureComponent);t.TextLayerItemInternal=b,b.propTypes={customTextRenderer:m.default.func,fontName:m.default.string.isRequired,itemIndex:m.default.number.isRequired,page:x.isPage.isRequired,rotate:x.isRotate,scale:m.default.number,str:m.default.string.isRequired,transform:m.default.arrayOf(m.default.number).isRequired,width:m.default.number.isRequired}},function(e,t,n){var r=n(56),o=n(57),a=n(29),i=n(58);e.exports=function(e,t){return r(e)||o(e,t)||a(e,t)||i()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],s=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);s=!0);}catch(e){c=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(9),o=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.AnnotationLayerInternal=void 0;var a=o(n(11)),i=o(n(17)),u=o(n(18)),s=o(n(5)),c=o(n(12)),l=o(n(6)),f=o(n(2)),d=o(n(8)),p=o(n(7)),h=o(n(4)),v=r(n(0)),g=o(n(3)),m=o(n(21)),y=o(n(22)),x=o(n(16)),b=n(13),w=n(14),_=function(e){function t(){var e,n;(0,s.default)(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=(0,l.default)(this,(e=(0,f.default)(t)).call.apply(e,[this].concat(o))),(0,h.default)((0,p.default)((0,p.default)(n)),"state",{annotations:null}),(0,h.default)((0,p.default)((0,p.default)(n)),"loadAnnotations",(0,u.default)(i.default.mark((function e(){var t,r,o;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.props.page,e.prev=1,r=(0,b.makeCancellable)(t.getAnnotations()),n.runningTask=r,e.next=6,r.promise;case 6:o=e.sent,n.setState({annotations:o},n.onLoadSuccess),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n.onLoadError(e.t0);case 13:case"end":return e.stop()}}),e,this,[[1,10]])})))),(0,h.default)((0,p.default)((0,p.default)(n)),"onLoadSuccess",(function(){var e=n.props.onGetAnnotationsSuccess,t=n.state.annotations;(0,b.callIfDefined)(e,t)})),(0,h.default)((0,p.default)((0,p.default)(n)),"onLoadError",(function(e){if(!(0,b.isCancelException)(e)){n.setState({annotations:!1}),(0,b.errorOnDev)(e);var t=n.props.onGetAnnotationsError;(0,b.callIfDefined)(t,e)}})),(0,h.default)((0,p.default)((0,p.default)(n)),"onRenderSuccess",(function(){var e=n.props.onRenderAnnotationLayerSuccess;(0,b.callIfDefined)(e)})),(0,h.default)((0,p.default)((0,p.default)(n)),"onRenderError",(function(e){if(!(0,b.isCancelException)(e)){(0,b.errorOnDev)(e);var t=n.props.onRenderAnnotationLayerError;(0,b.callIfDefined)(t,e)}})),n}return(0,d.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page annotations, but no page was specified.");this.loadAnnotations()}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.page,r=t.renderInteractiveForms;(e.page&&n!==e.page||r!==e.renderInteractiveForms)&&this.loadAnnotations()}},{key:"componentWillUnmount",value:function(){(0,b.cancelRunningTask)(this.runningTask)}},{key:"renderAnnotationLayer",value:function(){var e=this.state.annotations;if(e){var t=this.props,n=t.linkService,r=t.page,o=t.renderInteractiveForms,a=this.viewport.clone({dontFlip:!0}),i={annotations:e,div:this.annotationLayer,linkService:n,page:r,renderInteractiveForms:o,viewport:a};this.annotationLayer.innerHTML="";try{m.default.AnnotationLayer.render(i),this.onRenderSuccess()}catch(e){this.onRenderError(e)}}}},{key:"render",value:function(){var e=this;return v.default.createElement("div",{className:"react-pdf__Page__annotations annotationLayer",ref:function(t){e.annotationLayer=t}},this.renderAnnotationLayer())}},{key:"viewport",get:function(){var e=this.props,t=e.page,n=e.rotate,r=e.scale;return t.getViewport({scale:r,rotation:n})}}]),t}(v.PureComponent);t.AnnotationLayerInternal=_,_.propTypes={linkService:w.isLinkService.isRequired,onGetAnnotationsError:g.default.func,onGetAnnotationsSuccess:g.default.func,onRenderAnnotationLayerError:g.default.func,onRenderAnnotationLayerSuccess:g.default.func,page:w.isPage,renderInteractiveForms:g.default.bool,rotate:w.isRotate,scale:g.default.number};var E=function(e){return v.default.createElement(y.default.Consumer,null,(function(t){return v.default.createElement(x.default.Consumer,null,(function(n){return v.default.createElement(_,(0,a.default)({},t,n,e))}))}))};t.default=E},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){(function(){var n,r,o,a,i,u;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,a=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),u=1e9*t.uptime(),i=a-u):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,n(62))},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=u(d);l=!0;for(var t=c.length;t;){for(s=c,c=[];++f<t;)s&&s[f].run();f=-1,t=c.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){var r=n(64),o=n(65);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1},i=(r(e.i,o,a),o.locals?o.locals:{});e.exports=i},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i={};function u(e,t,n){for(var r=0;r<t.length;r++){var o={css:t[r][1],media:t[r][2],sourceMap:t[r][3]};i[e][r]?i[e][r](o):i[e].push(v(o,n))}}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function d(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var a=h++;n=p||(p=s(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o()),e=n.base?e+n.base:e,t=t||[],i[e]||(i[e]=[]),u(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){i[e]||(i[e]=[]),u(e,t,n);for(var r=t.length;r<i[e].length;r++)i[e][r]();i[e].length=t.length,0===i[e].length&&delete i[e]}}}},function(e,t,n){(t=n(66)(!1)).push([e.i,"body {\n  margin: 0;\n  background-color: #525659;\n  color: #fff;\n  font-family: Helvetica, Arial, sans-serif;\n}\n.Reader {\n  height: 100vh;\n}\n.Reader__container__numbers {\n  position: fixed;\n  top: 0px;\n  width: 100%;\n  margin: auto;\n  padding: 5px;\n  background-color: #565759;\n  z-index: 100;\n}\n.Reader__container__numbers__content {\n  font-size: 0.65rem;\n  text-align: center;\n  padding: 5px;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.144);\n  width: 50px;\n  margin: auto;\n}\n.Reader__container__navigate {\n  position: fixed;\n  bottom: 0px;\n  width: 100%;\n  margin: auto;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  z-index: 100;\n  background-color: #405a65;\n}\n.Reader__container__navigate__arrow {\n  font-size: 2.5em;\n  margin: 10px;\n  width: 100px;\n  margin: auto;\n  text-align: center;\n}\n.Reader__container__zoom_container {\n  position: fixed;\n  bottom: 60px;\n  right: 15px;\n  background-color: rgba(0, 0, 0, 0.9);\n  z-index: 101;\n  flex: 1;\n  justify-content: center;\n}\n.Reader__container__zoom_container__button {\n  font-size: 2.5em;\n  margin: 5;\n  width: 50px;\n  text-align: center;\n}\n.Reader__container__load {\n  margin-top: 1em;\n  color: white;\n}\n.Reader__container__document {\n  margin: auto;\n  padding-top: 40px;\n  padding-bottom: 50px;\n}\n.Reader__container__document .react-pdf__Document span {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.Reader__container__document .react-pdf__Page {\n  display: block;\n}\n.Reader__container__document .react-pdf__Page canvas {\n  margin: auto;\n}\n.Reader__container__document .react-pdf__Page__annotations {\n  display: none;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(s," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,u,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(30),a=n(31),i=n.n(a),u=n(32),s=n.n(u),c=n(15),l=n.n(c),f=()=>r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",className:"feather feather-arrow-down"},r.createElement("line",{x1:"12",y1:"5",x2:"12",y2:"19"}),r.createElement("polyline",{points:"19 12 12 19 5 12"})),d=()=>r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",className:""},r.createElement("polyline",{points:"5 12 19 12"}),r.createElement("polyline",{points:"12 5 12 19"})),p=()=>r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",className:""},r.createElement("line",{x1:"5",y1:"12",x2:"19",y2:"12"})),h=()=>r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",className:"feather feather-arrow-up"},r.createElement("line",{x1:"12",y1:"19",x2:"12",y2:"5"}),r.createElement("polyline",{points:"5 12 12 5 19 12"}));n(63);const v=document.querySelector("#react-container"),g={cMapUrl:"//cdn.jsdelivr.net/npm/pdfjs-dist@2.1.266/cmaps/",cMapPacked:!0};class m extends r.Component{constructor(){super(...arguments),this.state={numPages:null,currentPage:1,ready:!0,pageLoaded:!1,scale:this.props.defaultScale||1,error:void 0},this.MAX_SCALE=4,this.__zoomEvent=!1,this.onDocumentLoadSuccess=({numPages:e})=>{this.setState({numPages:e})},this.onError=e=>{console.error(e),this.setState({error:e})},this.zoomOut=e=>{e.preventDefault(),this.__zoomEvent||l()(this.zOut)},this.zoomIn=e=>{e.preventDefault(),this.__zoomEvent||l()(this.zIn)},this.zIn=()=>{this.state.scale<=this.MAX_SCALE-.25&&(this.__zoomEvent=!0,this.setState(e=>({scale:e.scale+.25})))},this.zOut=()=>{this.state.scale>=.75&&(this.__zoomEvent=!0,this.setState(e=>({scale:e.scale-.25})))},this.up=()=>{const{currentPage:e}=this.state;if(e>1){const t=e-1;this.setState({currentPage:t})}Object(c.cancel)(this.up)},this.down=()=>{const{currentPage:e,numPages:t}=this.state;if(e<t){const t=e+1;this.setState({currentPage:t})}Object(c.cancel)(this.down)},this.goUp=e=>{e.preventDefault(),l()(this.up)},this.goDown=e=>{e.preventDefault(),l()(this.down)},this.renderPage=e=>r.createElement(s.a,{loading:" ",key:"page_"+e,pageNumber:e,onLoadError:this.onError,onRenderError:this.onError,onGetTextError:this.onError,onGetAnnotationsError:this.onError,width:90*document.body.clientWidth/100,onRenderSuccess:()=>{this.__zoomEvent=!1},scale:this.state.scale}),this.renderPages=()=>Array.from(Array(this.state.numPages).keys()).map(e=>r.createElement("div",{key:"page-"+e.toString(),style:{marginBottom:10}},this.renderPage(e+1)))}static getDerivedStateFromError(e){return{error:e}}render(){const{numPages:e,currentPage:t,error:n}=this.state,{customStyle:o}=this.props;return n?r.createElement("p",null,n.message?n.message:"Sorry an error occurred!"):r.createElement("div",{className:"Reader"},r.createElement("div",{className:"Reader__container",style:null==o?void 0:o.readerContainer},r.createElement("div",{className:"Reader__container__document",style:null==o?void 0:o.readerContainerDocument},r.createElement(i.a,{loading:" ",onLoadSuccess:this.onDocumentLoadSuccess,onLoadError:this.onError,onSourceError:this.onError,options:g,file:y},b?this.renderPages():this.renderPage(t))),e&&!b&&r.createElement("div",{className:"Reader__container__numbers",style:null==o?void 0:o.readerContainerNumbers},r.createElement("div",{className:"Reader__container__numbers__content",style:null==o?void 0:o.readerContainerNumbersContent},t," / ",e)),r.createElement("div",{className:"Reader__container__zoom_container",style:null==o?void 0:o.readerContainerZoomContainer},r.createElement("div",{className:"Reader__container__zoom_container__button",style:null==o?void 0:o.readerContainerZoomContainerButton,onClick:this.zoomIn},r.createElement(d,null)),r.createElement("div",{className:"Reader__container__zoom_container__button",style:null==o?void 0:o.readerContainerZoomContainerButton,onClick:this.zoomOut},r.createElement(p,null))),e>1&&!b&&r.createElement("div",{className:"Reader__container__navigate",style:null==o?void 0:o.readerContainerNavigate},r.createElement("div",{className:"Reader__container__navigate__arrow",style:Object.assign(Object.assign({},1===t?{color:"rgba(255,255,255,0.4)"}:{}),null==o?void 0:o.readerContainerNavigateArrow),onClick:this.goUp},r.createElement(h,null)),r.createElement("div",{className:"Reader__container__navigate__arrow",style:Object.assign(Object.assign({},t===e?{color:"rgba(255,255,255,0.4)"}:{}),null==o?void 0:o.readerContainerNavigateArrow),onClick:this.goDown},r.createElement(f,null)))))}}const y=document.querySelector("#file").getAttribute("data-file"),x=window.CUSTOM_STYLE,b=window.WITH_SCROLL,w=window.DEFAULT_SCALE;Object(o.render)(r.createElement(m,{file:y,customStyle:x,withScroll:b,defaultScale:w}),v)}]);';
export function getBundle() {
  return Base64.decode(bundle)
}
export function getBundleMd5() {
  return 'e67b688f62470c9e21b69694ca85838a'
}
